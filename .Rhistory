est_data = trn.boston[-folds[[i]],]
k=1:100
knn_formula1=as.formula(medv~crim+zn+indus+chas+nox+rm+age+dis+
rad+tax+ptratio+lstat)
boston_knn_mod=lapply(k,function(x){knnreg(knn_formula1
,data=est_data,k=x)})
boston_knn_pred=lapply(boston_knn_mod,predict,newdata=val_data)
calc_mse=function(actual,predicted){
mean((actual-predicted)^2)
}
boston_knn_mse=sapply(boston_knn_pred,calc_mse,actual=val_data$medv)
unscaled_min = which.min(boston_knn_mse)
k=1:100
knn_formula2=as.formula(medv~scale(crim)+scale(zn)+scale(indus)+
chas+scale(nox)+scale(rm)+scale(age)+
scale(dis)+scale(rad)+scale(tax)+
scale(ptratio)+scale(lstat))
boston_knn_mod=lapply(k,function(x){knnreg(knn_formula2
,data=est_data,k=x)})
boston_knn_pred=lapply(boston_knn_mod,predict,newdata=val_data)
calc_mse=function(actual,predicted){
mean((actual-predicted)^2)
}
boston_knn_mse_scale=sapply(boston_knn_pred,calc_mse,actual=val_data$medv)
scaled_min = which.min(boston_knn_mse_scale)
if (scaled_min>=unscaled_min) {
# print(scaled_min)
s=sprintf("CV %d: %s is best at k=%d", i, "Scaled", scaled_min)
print(s)
} else {
# print(unscaled_min)
s=sprintf("CV %d: %s is best at k=%d", i, "Uncaled", unscaled_min)
print(s)
}
}
print(err_norm)
err_norm=matrix(0,nrow=10,ncol=100)
err_scaled=matrix(0,nrow=10,ncol=100)
for (i in 1:10) {
val_data = trn.boston[folds[[i]],]
est_data = trn.boston[-folds[[i]],]
k=1:100
knn_formula1=as.formula(medv~crim+zn+indus+chas+nox+rm+age+dis+
rad+tax+ptratio+lstat)
boston_knn_mod=lapply(k,function(x){knnreg(knn_formula1
,data=est_data,k=x)})
boston_knn_pred=lapply(boston_knn_mod,predict,newdata=val_data)
calc_mse=function(actual,predicted){
mean((actual-predicted)^2)
}
err_norm[i,]=sapply(boston_knn_pred,calc_mse,actual=val_data$medv)
k=1:100
knn_formula2=as.formula(medv~scale(crim)+scale(zn)+scale(indus)+
chas+scale(nox)+scale(rm)+scale(age)+
scale(dis)+scale(rad)+scale(tax)+
scale(ptratio)+scale(lstat))
boston_knn_mod=lapply(k,function(x){knnreg(knn_formula2
,data=est_data,k=x)})
boston_knn_pred=lapply(boston_knn_mod,predict,newdata=val_data)
calc_mse=function(actual,predicted){
mean((actual-predicted)^2)
}
err_scaled[i,]=sapply(boston_knn_pred,calc_mse,actual=val_data$medv)
}
print(err_norm)
colMeans(err_norm)
print(dim(err_norm))
err_norm=matrix(0,nrow=10,ncol=100)
err_scaled=matrix(0,nrow=10,ncol=100)
for (i in 1:10) {
val_data = trn.boston[folds[[i]],]
est_data = trn.boston[-folds[[i]],]
k=1:100
knn_formula1=as.formula(medv~crim+zn+indus+chas+nox+rm+age+dis+
rad+tax+ptratio+lstat)
boston_knn_mod=lapply(k,function(x){knnreg(knn_formula1
,data=est_data,k=x)})
boston_knn_pred=lapply(boston_knn_mod,predict,newdata=val_data)
calc_mse=function(actual,predicted){
mean((actual-predicted)^2)
}
err_norm[i,]=sapply(boston_knn_pred,calc_mse,actual=val_data$medv)
k=1:100
knn_formula2=as.formula(medv~scale(crim)+scale(zn)+scale(indus)+
chas+scale(nox)+scale(rm)+scale(age)+
scale(dis)+scale(rad)+scale(tax)+
scale(ptratio)+scale(lstat))
boston_knn_mod=lapply(k,function(x){knnreg(knn_formula2
,data=est_data,k=x)})
boston_knn_pred=lapply(boston_knn_mod,predict,newdata=val_data)
calc_mse=function(actual,predicted){
mean((actual-predicted)^2)
}
err_scaled[i,]=sapply(boston_knn_pred,calc_mse,actual=val_data$medv)
}
mean_mse = colMeans(err_norm)
print(which.min(mean_mse))
print(mean_mse[which.min(mean_mse)])
mean_mse = colMeans(err_scaled)
print(which.min(mean_mse))
print(mean_mse[which.min(mean_mse)])
k=5
knn_formula2=as.formula(medv~scale(crim)+scale(zn)+scale(indus)+
chas+scale(nox)+scale(rm)+scale(age)+
scale(dis)+scale(rad)+scale(tax)+
scale(ptratio)+scale(lstat))
boston_knn_mod=lapply(k,function(x){knnreg(knn_formula2
,data=trn.boston,k=x)})
boston_knn_pred=lapply(boston_knn_mod,predict,newdata=tst.boston)
calc_mse=function(actual,predicted){
mean((actual-predicted)^2)
}
boston_knn_mse_scale=sapply(boston_knn_pred,calc_mse,
actual=tst.boston$medv)
print(boston_knn_mse_scale)
df = read.csv("../dataset/players_20_edited.csv")
view(df)
df = read.csv("../dataset/players_20_edited.csv")
df = read.csv("../dataset/players_20_edited.csv")
df = read.csv("..\dataset\players_20_edited.csv")
.
df = read.csv("../dataset/players_20_edited.csv")
df = read.csv("/../dataset/players_20_edited.csv")
getwd()
df = read.csv("../dataset/players_20_edited.csv")
getwd()
getwd()
setwd("C:\Users\ThinkPad\Desktop\Spring 2023\STAT432\STAT432-SP23-Final-Project\project_proposal")
setwd("C:/Users/ThinkPad/Desktop/Spring 2023/STAT432/STAT432-SP23-Final-Project/project_proposal")
getwd()
df = read.csv("../dataset/players_20_edited.csv")
view(df)
?view
View(df)
knitr::opts_chunk$set(echo = TRUE)
df = read.csv("../dataset/players_20_edited.csv")
head(df)
View(df)
dim(df)
col_idx = c(8, 14:21)
caret::featurePlot(
x=df[14:21],
y=df$overall,
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
col_idx = c(8, 14:21)
caret::featurePlot(
x=df[,14:21],
y=df$overall,
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,14:17],
y=df$overall,
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,18:21],
y=df$overall,
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,16:18],
y=df$overall,
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,19:21],
y=df$overall,
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,16:18],
y=df$overall,
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,19:21],
y=df$overall,
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,16:18],
y=df$overall,
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,19:21],
y=df$overall,
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,16:18],
y=df$overall,
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,19:21],
y=df[,8],
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,16:18],
y=df[,8],
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,19:21],
y=df[,8],
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,16:18],
y=df[,8],
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,c(8,19:21)],
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,16:18],
y=df[,8],
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,19:21],
y=df[,8],
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
library(ggplot2)
ggplot(df, aes(x=overall)) +
geom_histogram()
library(ggplot2)
ggplot(df, aes(x=overall)) +
geom_histogram()
library(ggplot2)
ggplot(df, aes(x=overall)) +
geom_histogram(colour="black", fill="lightblue")
caret::featurePlot(
x=df[,3:6],
y=df[,8],
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
caret::featurePlot(
x=df[,3:5],
y=df[,8],
plot="pairs",
scales=list(
x=list(relation="free"),
y=list(relation="free")
)
)
df$nationality = as.factor(df$nationality)
ggplot(df, aes(x=overall, color=nationality)) +
geom_histogram()
df$nationality = as.factor(df$nationality)
freq_nations = sort(df$nationality, decreasing=TRUE)[1:3]
print(freq_nations)
# ggplot(df, aes(x=overall, color=nationality)) +
#   geom_histogram()
df$nationality = as.factor(df$nationality)
freq_nations = sort(table(df$nationality), decreasing=TRUE)[1:3]
print(freq_nations)
# ggplot(df, aes(x=overall, color=nationality)) +
#   geom_histogram()
df$nationality = as.factor(df$nationality)
freq_nations = sort(table(df$nationality), decreasing=TRUE)[1:10]
print(freq_nations)
# ggplot(df, aes(x=overall, color=nationality)) +
#   geom_histogram()
df$nationality = as.factor(df$nationality)
freq_nations = sort(table(df$nationality), decreasing=TRUE)[1:10]
print(freq_nations)
df_nation_limit = df[df$nationality %in% freq_nations,]
# ggplot(df, aes(x=overall, color=nationality)) +
#   geom_histogram()
df$nationality = as.factor(df$nationality)
freq_nations = sort(table(df$nationality), decreasing=TRUE)[1:10]
print(freq_nations)
df_nation_limit = df[df$nationality %in% freq_nations,]
ggplot(df_nation_limit, aes(x=overall, color=nationality)) +
geom_histogram()
head(df_nation_limit)
df$nationality = as.factor(df$nationality)
freq_nations = sort(table(df$nationality), decreasing=TRUE)[1:10]
print(freq_nations)
df_nation_limit = df[, df$nationality %in% freq_nations]
head(df_nation_limit)
ggplot(df_nation_limit, aes(x=overall, color=nationality)) +
geom_histogram()
print(typeof(freq_nations))
print(typeof(freq_nations))
freq_nations
print(typeof(freq_nations[0]))
print(typeof(freq_nations[1]))
# df$nationality = as.factor(df$nationality)
#
# freq_nations = sort(table(df$nationality), decreasing=TRUE)[1:10]
# print(typeof(freq_nations[1]))
frequent_nations= c("England",'Germany','Spain','France','Argentina',
'Brazil','Italy','Colombia','Japan','Netherlands')
df_nation_limit = df[df$nationality %in% frequent_nations, ]
ggplot(df_nation_limit, aes(x=overall, color=nationality)) +
geom_histogram()
# df$nationality = as.factor(df$nationality)
#
# freq_nations = sort(table(df$nationality), decreasing=TRUE)[1:10]
# print(typeof(freq_nations[1]))
frequent_nations= c("England",'Germany','Spain','France','Argentina',
'Brazil','Italy','Colombia','Japan','Netherlands')
df_nation_limit = df[df$nationality %in% frequent_nations, ]
ggplot(df_nation_limit, aes(x=overall, color=nationality)) +
geom_histogram(fill="white", alpha=0.5, position = "identity")
# df$nationality = as.factor(df$nationality)
#
# freq_nations = sort(table(df$nationality), decreasing=TRUE)[1:10]
# print(typeof(freq_nations[1]))
frequent_nations= c("England",'Germany','Spain','France','Argentina',
'Brazil','Italy','Colombia','Japan','Netherlands')
df_nation_limit = df[df$nationality %in% frequent_nations, ]
ggplot(df_nation_limit, aes(x=overall, fill=nationality)) +
geom_histogram(alpha=0.5, position = "identity")
# df$nationality = as.factor(df$nationality)
#
# freq_nations = sort(table(df$nationality), decreasing=TRUE)[1:10]
# print(typeof(freq_nations[1]))
frequent_nations= c("England",'Germany','Spain','France','Argentina',
'Brazil','Italy','Colombia','Japan','Netherlands')
df_nation_limit = df[df$nationality %in% frequent_nations, ]
ggplot(df_nation_limit, aes(x=overall, color=nationality,
fill=nationality)) +
geom_histogram(alpha=0.5, position = "identity")
# df$nationality = as.factor(df$nationality)
#
# freq_nations = sort(table(df$nationality), decreasing=TRUE)[1:10]
# print(typeof(freq_nations[1]))
frequent_nations= c("England",'Germany','Spain','France','Argentina',
'Brazil','Italy','Colombia','Japan','Netherlands')
df_nation_limit = df[df$nationality %in% frequent_nations, ]
ggplot(df_nation_limit, aes(x=overall, color=nationality,
fill=nationality)) +
geom_histogram(alpha=0.5, position = "identity") +
geom_title("Overall Scores of Top 10 Frequent Nations")
# df$nationality = as.factor(df$nationality)
#
# freq_nations = sort(table(df$nationality), decreasing=TRUE)[1:10]
# print(typeof(freq_nations[1]))
frequent_nations= c("England",'Germany','Spain','France','Argentina',
'Brazil','Italy','Colombia','Japan','Netherlands')
df_nation_limit = df[df$nationality %in% frequent_nations, ]
ggplot(df_nation_limit, aes(x=overall, color=nationality,
fill=nationality)) +
geom_histogram(alpha=0.5, position = "identity") +
title("Overall Scores of Top 10 Frequent Nations")
# df$nationality = as.factor(df$nationality)
#
# freq_nations = sort(table(df$nationality), decreasing=TRUE)[1:10]
# print(typeof(freq_nations[1]))
frequent_nations= c("England",'Germany','Spain','France','Argentina',
'Brazil','Italy','Colombia','Japan','Netherlands')
df_nation_limit = df[df$nationality %in% frequent_nations, ]
ggplot(df_nation_limit, aes(x=overall, color=nationality,
fill=nationality)) +
geom_histogram(alpha=0.5, position = "identity") +
ggtitle("Overall Scores of Top 10 Frequent Nations")
print(count_dataframe)
count_dataframe = df %>% count(nationality)
library(hwordcloud)
install.packages("hwordcloud")
install.packages("wordcloud2")
library(hwordcloud)
library(wordcloud2)
nations = df$nationality
print(nations)
# hwordcloud(text = df$word, size = df$freq,
#            width = "100%", height = "200px")
print(table(nations))
print(typeof(table(nations)))
library(hwordcloud)
library(wordcloud2)
nations = df$nationality
nation_count <- data.frame(
nation = unique(nations),  # Unique nation names
count = sapply(unique(nations), function(x) sum(nations == x))
)
hwordcloud(text = nation_count$nation, size = nation_count$count,
width = "100%", height = "200px")
library(hwordcloud)
library(wordcloud2)
nations = df$nationality
nation_count <- data.frame(
nation = unique(nations),  # Unique nation names
count = sapply(unique(nations), function(x) sum(nations == x))
)
hwordcloud(text = nation_count$nation, size = nation_count$count,
width = "100%", height = "100%")
library(hwordcloud)
library(wordcloud2)
nations = df$nationality
nation_count <- data.frame(
nation = unique(nations),  # Unique nation names
count = sapply(unique(nations), function(x) sum(nations == x))
)
hwordcloud(text = nation_count$nation, size = log(nation_count$count),
width = "100%", height = "100%")
library(hwordcloud)
library(wordcloud2)
nations = df$nationality
nation_count <- data.frame(
nation = unique(nations),  # Unique nation names
count = sapply(unique(nations), function(x) sum(nations == x))
)
hwordcloud(text = nation_count$nation, size = log(nation_count$count),
width = "100%", height = "120%")
library(hwordcloud)
library(wordcloud2)
nations = df$nationality
nation_count <- data.frame(
nation = unique(nations),  # Unique nation names
count = sapply(unique(nations), function(x) sum(nations == x))
)
hw=hwordcloud(text = nation_count$nation, size = log(nation_count$count),
width = "100%", height = "120%")
saveWidget(hw,"1.html",selfcontained = F)
setwd("C:/Users/ThinkPad/Desktop/Spring 2023/STAT432/STAT432-SP23-Final-Project")
getwd()
df = read.csv("dataset/players_20_edited.csv")
source("~/.active-rstudio-document", echo=TRUE)
hwordcloud(text = nation_count$nation, size = log(nation_count$count),
width = "100%", height = "120%")
source("~/.active-rstudio-document", echo=TRUE)
hwordcloud(text = nation_count$nation, size = log(nation_count$count),
width = "1500px", height = "1000px")
hwordcloud(text = nation_count$nation, size = log(nation_count$count),
width = "100%", height = "100%")
